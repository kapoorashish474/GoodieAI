services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-hn_analytics}
      POSTGRES_USER: ${POSTGRES_USER:-ashishkapoor}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-ashishkapoor} -d ${POSTGRES_DB:-hn_analytics}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache/Queue
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-ashishkapoor}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-hn_analytics}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - HN_API_BASE_URL=${HN_API_BASE_URL:-https://hacker-news.firebaseio.com/v0}
      - HN_TOP_STORIES_LIMIT=${HN_TOP_STORIES_LIMIT:-50}
      - APP_NAME=${APP_NAME:-Hacker News Analytics Dashboard}
      - DEBUG=${DEBUG:-true}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
    command: python main.py api --host 0.0.0.0 --port 8000

  # Celery Worker
  celery-worker:
    build: .
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-ashishkapoor}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-hn_analytics}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - HN_API_BASE_URL=${HN_API_BASE_URL:-https://hacker-news.firebaseio.com/v0}
      - HN_TOP_STORIES_LIMIT=${HN_TOP_STORIES_LIMIT:-50}
      - APP_NAME=${APP_NAME:-Hacker News Analytics Dashboard}
      - DEBUG=${DEBUG:-true}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
    command: python main.py celery-worker

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: npm run dev

volumes:
  postgres_data:
  redis_data: 